service: sls-notes-backend
configValidationMode: error
frameworkVersion: '3.32'

plugins:
  - serverless-offline
  - serverless-domain-manager

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name
  customDomain:
    domainName: api.apiservice.live
    stage: ${self:provider.stage}
    basePath: 'v1'
    certificateName: apiservice.live
    createRoute53Record: true
 
provider:
  name: aws
  runtime: nodejs18.x
  region: ca-central-1
  stage: prod
  memorySize: 128
  timeout: 10
  endpointType: regional
  environment:
    NOTES_TABLE: ${self:service}-notes-${opt:stage, self:provider.stage}
    USERS_TABLE: ${self:service}-users-${opt:stage, self:provider.stage}
    REGION: ca-central-1
    ACCOUNT_ID: 681206886478
    MAGIC_SECRET_KEY: sk_live_996CF8DA2DCB8FE0
    JWT_SECRET: 3yreirhscbsuhw2313333*&
  iam:
    role:
      statements:
       - Effect: Allow
         Action:
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:DeleteItem
         Resource: 
          - arn:aws:dynamodb:${self:provider.environment.REGION}:*:table/${self:provider.environment.NOTES_TABLE}
          - arn:aws:dynamodb:${self:provider.environment.REGION}:*:table/${self:provider.environment.USERS_TABLE} 
       - Effect: Allow
         Action:      
          - cloudfront:UpdateDistribution         
         Resource: '*'

functions:
  authorizer:
    handler: api/authorizer.handler
    description: Authenticate token, grant IAM permissions if valid.
  sign-in: 
    handler: api/sign-in.handler
    description: sign in 
    events:
      - http:
          path: signin
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  sign-up: 
    handler: api/sign-up.handler
    description: sign up 
    events:
      - http:
          path: signup
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  add-note:
    handler: api/add-note.handler
    description: POST /note
    events:
      - http:
          path: note
          method: post
          authorizer: 
            name: authorizer
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  update-note:
    handler: api/update-note.handler
    description: PATCH /note
    events:
      - http:
          path: note
          method: patch
          authorizer: 
            name: authorizer
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-notes:
    handler: api/get-notes.handler
    description: GET /notes
    events:
      - http:
          path: notes
          method: get
          authorizer: 
            name: authorizer
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-note:
    handler: api/get-note.handler
    description: GET /note/n/{note_id}
    events:
      - http:
          path: note/n/{note_id}
          method: get
          authorizer: 
            name: authorizer
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  delete-note:
    handler: api/delete-note.handler
    description: DELETE /note
    events:
      - http:
          path: note/t/{timestamp}
          method: delete
          authorizer: 
            name: authorizer
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1  
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: note_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: note_id-index
            KeySchema:
              - AttributeName: note_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
